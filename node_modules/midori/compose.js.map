{"version":3,"sources":["../src/compose.js"],"names":["compose","apps","length","arg","reduce","a","b","args"],"mappings":";;;;;;;AAEA;;;;;;;AAOA,MAAMA,OAAO,GAAG,CAAC,GAAGC,IAAJ,KAA0B;AACxC,MAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAQC,GAAD,IAASA,GAAhB;AACD;;AAED,MAAIF,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAOD,IAAI,CAAC,CAAD,CAAX;AACD;;AAED,SAAOA,IAAI,CAACG,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU,CAAC,GAAGC,IAAJ,KAAaF,CAAC,CAACC,CAAC,CAAC,GAAGC,IAAJ,CAAF,CAApC,CAAP;AACD,CAVD;AAYA;;;;AAIA;AACA;;;eACiBP,O","sourcesContent":["// @flow\n\n/**\n * Composes apps together from left to right.\n *\n * @param {Array<App>} apps The apps to compose.\n * @returns {App} A new app representing the sequential combination of all the\n * given apps.\n */\nconst compose = (...apps: Array<*>): * => {\n  if (apps.length === 0) {\n    return (arg) => arg;\n  }\n\n  if (apps.length === 1) {\n    return apps[0];\n  }\n\n  return apps.reduce((a, b) => (...args) => a(b(...args)));\n};\n\n/**\n * @tag core\n * @desc Combine apps.\n */\n// TODO: FIXME: Any way to do this without casting through `any`?\n// $ExpectError\nexport default ((compose: any): $Compose);\n"],"file":"compose.js"}