"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.withOptions = void 0;

var _httpErrors = _interopRequireDefault(require("http-errors"));

var _rawBody = _interopRequireDefault(require("raw-body"));

var _zlib = _interopRequireDefault(require("zlib"));

var _contentTypeParser = _interopRequireDefault(require("content-type-parser"));

var _createSelector = _interopRequireDefault(require("./createSelector"));

var _request = _interopRequireDefault(require("./request"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const contentstream = (req, inflate) => {
  const encoding = (req.headers['content-encoding'] || 'identity').toLowerCase();
  let stream;

  if (inflate === false && encoding !== 'identity') {
    throw (0, _httpErrors.default)(415, `unsupported content encoding "${encoding}"`, {
      encoding: encoding,
      type: 'encoding.unsupported'
    });
  }

  switch (encoding) {
    case 'deflate':
      stream = _zlib.default.createInflate();
      req.pipe(stream);
      break;

    case 'gzip':
      stream = _zlib.default.createGunzip();
      req.pipe(stream);
      break;

    case 'identity':
      stream = req;
      break;

    default:
      throw (0, _httpErrors.default)(415, `unsupported content encoding "${encoding}"`, {
        encoding: encoding,
        type: 'encoding.unsupported'
      });
  }

  return stream;
};

const isParsed = new WeakMap();

const withOptions = (options = {}) => (0, _createSelector.default)(_request.default, async req => {
  if (isParsed.has(req)) {
    throw (0, _httpErrors.default)(500, 'Body already read.');
  }

  const bodyOptions = {
    encoding: options.encoding,
    limit: options.limit
  };
  const type = (0, _contentTypeParser.default)(req.headers['content-type']);
  const charset = type && type.get('charset');

  if (typeof charset === 'string' && charset.length > 0 && typeof options.encoding === 'undefined') {
    bodyOptions.encoding = charset;
  }

  const stream = contentstream(req, options.inflate);
  isParsed.set(req, true);

  if (options.stream === true) {
    return stream;
  }

  return await (0, _rawBody.default)(stream, bodyOptions);
});
/**
 * @tag http
 * @desc Do the thing.
 */


exports.withOptions = withOptions;
const body = withOptions();
body.withOptions = withOptions;
var _default = body;
exports.default = _default;
//# sourceMappingURL=body.js.map