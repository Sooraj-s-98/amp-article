"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apply = _interopRequireDefault(require("./apply"));

var _request = _interopRequireDefault(require("./request"));

var _response = _interopRequireDefault(require("./response"));

var _error = _interopRequireDefault(require("./error"));

var _next = _interopRequireDefault(require("./next"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const handleBasic = handler => {
  return app => _objectSpread({}, app, {
    request: async (req, res) => {
      try {
        handler(req, res);
        return null;
      } catch (err) {
        return await app.requestError(err, req, res);
      }
    }
  });
};

const handleCallback = handler => {
  return app => _objectSpread({}, app, {
    request: async (req, res) => {
      try {
        await new Promise((resolve, reject) => {
          handler(req, res, err => {
            err ? reject(err) : resolve();
          });
        });
        return await app.request(req, res);
      } catch (err) {
        return await app.requestError(err, req, res);
      }
    }
  });
};

const handleError = handler => {
  return (0, _error.default)(err => {
    return (0, _apply.default)(_request.default, _response.default, (req, res) => {
      return new Promise((resolve, reject) => {
        handler(err, req, res, err => {
          if (err) {
            return reject(err);
          }

          return resolve(_next.default);
        });
      });
    });
  });
};
/**
 * Handle express-style middleware.
 * @param {Function} handler Express-style middleware.
 * @returns {App} App instance.
 */


var _default = handler => {
  if (handler.length === 2) {
    return handleBasic(handler);
  } else if (handler.length === 3) {
    return handleCallback(handler);
  } else if (handler.length === 4) {
    return handleError(handler);
  }

  throw new TypeError();
};

exports.default = _default;
//# sourceMappingURL=middleware.js.map