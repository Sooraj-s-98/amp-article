{"version":3,"sources":["../../src/match/query.js"],"names":["isMatch","pred","obj","Array","isArray","some","x","index","Object","keys","every","key","query","req","search"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AASA,MAAMA,OAAO,GAAG,CAACC,IAAD,EAAkBC,GAAlB,KAA6B;AAC3C,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACtB,WAAOA,GAAG,CAACG,IAAJ,CAAUC,CAAD,IAAON,OAAO,CAACC,IAAD,EAAOK,CAAP,CAAvB,CAAP;AACD,GAFD,MAEO,IAAIH,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AAC9B,WAAOA,IAAI,CAACI,IAAL,CAAWC,CAAD,IAAON,OAAO,CAACM,CAAD,EAAIJ,GAAJ,CAAxB,CAAP;AACD,GAFM,MAEA,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AACnC;AACA,UAAMM,KAA4B,GAAGN,IAArC;AACA,WAAOO,MAAM,CAACC,IAAP,CAAYR,IAAZ,EAAkBS,KAAlB,CAAyBC,GAAD,IAAS;AACtC,aAAOX,OAAO,CAACO,KAAK,CAACI,GAAD,CAAN,EAAaT,GAAG,CAACS,GAAD,CAAhB,CAAd;AACD,KAFM,CAAP;AAGD;;AACD,SAAOV,IAAI,KAAKC,GAAhB;AACD,CAbD;;eAegBU,KAAD,IACb,kBAAQC,GAAD,IAASb,OAAO,CAACY,KAAD,EAAQ,eAAM,uBAAIC,GAAJ,EAASC,MAAf,CAAR,CAAvB,C","sourcesContent":["// @flow\nimport url from 'parseurl';\nimport {parse} from 'qs';\nimport {create} from './util';\n\ntype Predicate =\n  | {[string]: Predicate}\n  | Array<Predicate>\n  | string\n  | number\n  | boolean;\n\nconst isMatch = (pred: Predicate, obj: *) => {\n  if (Array.isArray(obj)) {\n    return obj.some((x) => isMatch(pred, x));\n  } else if (Array.isArray(pred)) {\n    return pred.some((x) => isMatch(x, obj));\n  } else if (typeof pred === 'object') {\n    // TODO: FIXME: Flow requires this assignment.\n    const index: {[string]: Predicate} = pred;\n    return Object.keys(pred).every((key) => {\n      return isMatch(index[key], obj[key]);\n    });\n  }\n  return pred === obj;\n};\n\nexport default (query: Predicate) =>\n  create((req) => isMatch(query, parse(url(req).search)));\n"],"file":"query.js"}