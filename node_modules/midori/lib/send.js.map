{"version":3,"sources":["../src/send.js"],"names":["handleHead","res","status","headers","writeHead","sendBinary","body","setHeader","Buffer","byteLength","toString","end","halt","sendStream","pipe","send","rest","length","TypeError","isBuffer"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AASA,MAAMA,UAAU,GAAG,CACjBC,GADiB,EAEjBC,MAFiB,EAGjBC,OAHiB,KAId;AACH,MAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BC,OAAlC,EAA2C;AACzC;AACAF,IAAAA,GAAG,CAACG,SAAJ,CAAcF,MAAd,EAAsBC,OAAtB;AACD;AACF,CATD;;AAWA,MAAME,UAAU,GAAG,CACjBH,MADiB,EAEjBC,OAFiB,EAGjBG,IAHiB,KAId;AACH,SAAO,uBAAUL,GAAD,IAAS;AACvB;AACAA,IAAAA,GAAG,CAACM,SAAJ,CAAc,gBAAd,EAAgCC,MAAM,CAACC,UAAP,CAAkBH,IAAlB,EAAwB,MAAxB,EAAgCI,QAAhC,EAAhC;AACAV,IAAAA,UAAU,CAACC,GAAD,EAAMC,MAAN,EAAcC,OAAd,CAAV;AACAF,IAAAA,GAAG,CAACU,GAAJ,CAAQL,IAAR;AACA,WAAOM,aAAP;AACD,GANM,CAAP;AAOD,CAZD;;AAcO,MAAMC,UAAU,GAAG,CACxBX,MADwB,EAExBC,OAFwB,EAGxBG,IAHwB,KAIrB;AACH,SAAO,uBAAUL,GAAD,IAAS;AACvBD,IAAAA,UAAU,CAACC,GAAD,EAAMC,MAAN,EAAcC,OAAd,CAAV;AACAG,IAAAA,IAAI,CAACQ,IAAL,CAAUb,GAAV;AACA,WAAOW,aAAP;AACD,GAJM,CAAP;AAKD,CAVM;;;;AAgBP;;;;;;;AAOA,MAAMG,IAAU,GAAG,CAAC,GAAGC,IAAJ,KAA4B;AAC7C,MAAIV,IAAJ;AACA,MAAIJ,MAAe,GAAG,GAAtB;AACA,MAAIC,OAAJ;;AAEA,MAAIa,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACAf,IAAAA,MAAM,GAAGc,IAAI,CAAC,CAAD,CAAb,CAFqB,CAGrB;;AACAb,IAAAA,OAAO,GAAGa,IAAI,CAAC,CAAD,CAAd,CAJqB,CAKrB;;AACAV,IAAAA,IAAI,GAAGU,IAAI,CAAC,CAAD,CAAX;AACD,GAPD,MAOO,IAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AAC5B;AACAf,IAAAA,MAAM,GAAGc,IAAI,CAAC,CAAD,CAAb,CAF4B,CAG5B;;AACAV,IAAAA,IAAI,GAAGU,IAAI,CAAC,CAAD,CAAX;AACD,GALM,MAKA,IAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AAC5B;AACAX,IAAAA,IAAI,GAAGU,IAAI,CAAC,CAAD,CAAX;AACD,GAHM,MAGA;AACL,UAAM,IAAIE,SAAJ,CAAc,qCAAd,CAAN;AACD;;AAED,MAAI,OAAOZ,IAAP,KAAgB,QAAhB,IAA4BE,MAAM,CAACW,QAAP,CAAgBb,IAAhB,CAAhC,EAAuD;AACrD;AACA;AACA,WAAOD,UAAU,CAACH,MAAD,EAASC,OAAT,EAAkBG,IAAlB,CAAjB;AACD,GAJD,MAIO,IAAIA,IAAI,IAAI,OAAOA,IAAI,CAACQ,IAAZ,KAAqB,UAAjC,EAA6C;AAClD;AACA;AACA,WAAOD,UAAU,CAACX,MAAD,EAASC,OAAT,EAAkBG,IAAlB,CAAjB;AACD;;AACD,QAAM,IAAIY,SAAJ,CAAc,gCAAd,CAAN;AACD,CAlCD;;eAoCeH,I","sourcesContent":["// @flow\nimport response from './response';\nimport halt from './halt';\nimport {Readable} from 'stream';\n\nimport type {ServerResponse} from 'http';\nimport type {App} from './types';\n\ntype Body = string | Buffer | Readable;\n\ntype Headers = {[string]: string | Array<string>};\n\nconst handleHead = (\n  res: ServerResponse,\n  status: ?number,\n  headers: ?Headers,\n) => {\n  if (typeof status === 'number' || headers) {\n    // $ExpectError\n    res.writeHead(status, headers);\n  }\n};\n\nconst sendBinary = (\n  status: ?number,\n  headers: ?Headers,\n  body: string | Buffer,\n) => {\n  return response((res) => {\n    // 'utf8' here is only applicable if the body is a string\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8').toString());\n    handleHead(res, status, headers);\n    res.end(body);\n    return halt;\n  });\n};\n\nexport const sendStream = (\n  status: ?number,\n  headers: ?Headers,\n  body: Readable,\n) => {\n  return response((res) => {\n    handleHead(res, status, headers);\n    body.pipe(res);\n    return halt;\n  });\n};\n\ntype Send = ((status: number, headers: Headers, body: Body) => *) &\n  ((status: number, body: Body) => *) &\n  ((body: Body) => *);\n\n/**\n * Send content to the client.\n * @param {Number} status Status code to send.\n * @param {Object} headers Headers to send.\n * @param {String|Buffer|Readable} body Data to send.\n * @returns {App} App instance.\n */\nconst send: Send = (...rest: Array<*>): App => {\n  let body: ?Body;\n  let status: ?number = 200;\n  let headers: ?Headers;\n\n  if (rest.length === 3) {\n    // $ExpectError\n    status = rest[0];\n    // $ExpectError\n    headers = rest[1];\n    // $ExpectError\n    body = rest[2];\n  } else if (rest.length === 2) {\n    // $ExpectError\n    status = rest[0];\n    // $ExpectError\n    body = rest[1];\n  } else if (rest.length === 1) {\n    // $ExpectError\n    body = rest[0];\n  } else {\n    throw new TypeError('`send` expects 1, 2 or 3 arguments.');\n  }\n\n  if (typeof body === 'string' || Buffer.isBuffer(body)) {\n    // TODO: FIXME: Why does flow hate this?\n    // $ExpectError\n    return sendBinary(status, headers, body);\n  } else if (body && typeof body.pipe === 'function') {\n    // TODO: FIXME: Why does flow hate this?\n    // $ExpectError\n    return sendStream(status, headers, body);\n  }\n  throw new TypeError('Invalid value given to `send`.');\n};\n\nexport default send;\n"],"file":"send.js"}