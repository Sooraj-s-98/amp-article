"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _response = require("./response");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Main thing.
 * @param {Function} handler Request handler. Must return another app creator.
 * @returns {App} App instance.
 */
const upgrade = handler => app => {
  return _objectSpread({}, app, {
    upgrade: async (req, socket, head) => {
      try {
        (0, _response.installUpgradeResponse)(req, socket);
        const nextApp = await handler({
          req,
          socket,
          head
        });
        return nextApp(app).upgrade(req, socket, head);
      } catch (err) {
        return app.upgradeError(err, req, socket, head);
      }
    },
    request: (req, res) => {
      const error = new Error('Must only pass upgrade events to `upgrade`.');
      return app.requestError(error, req, res);
    }
  });
};

upgrade._selector = () => null;

var _default = upgrade;
exports.default = _default;
//# sourceMappingURL=upgrade.js.map