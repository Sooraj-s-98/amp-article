"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isSelector = _interopRequireDefault(require("../internal/isSelector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MockEnvironment {
  constructor() {
    _defineProperty(this, "values", void 0);

    this.values = new Map();
  }

  mockValue(selector, value) {
    this.values.set(selector, value);
  }

  hasValueFor(selector) {
    return this.values.has(selector);
  }

  valueFor(selector) {
    return this.values.get(selector);
  }

}

const runSelectorInternal = async (app, env) => {
  if ((0, _isSelector.default)(app)) {
    if (env.hasValueFor(app)) {
      // flowlint-next-line unclear-type: off
      return env.valueFor(app);
    }

    const args = [];

    for (const selectorApp of app._selectors) {
      args.push((await runSelectorInternal(selectorApp, env)));
    }

    const result = await app._selector(...args);
    env.mockValue(app, result);
    return result;
  }

  throw new TypeError('Must pass valid selector.');
};

const runSelector = async (app, fn = () => {}) => {
  const env = new MockEnvironment();
  fn(env);
  return await runSelectorInternal(app, env);
};

var _default = runSelector;
exports.default = _default;
//# sourceMappingURL=runSelector.js.map