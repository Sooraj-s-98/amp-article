{"version":3,"sources":["../../src/test/runSelector.js"],"names":["MockEnvironment","constructor","values","Map","mockValue","selector","value","set","hasValueFor","has","valueFor","get","runSelectorInternal","app","env","args","selectorApp","_selectors","push","result","_selector","TypeError","runSelector","fn"],"mappings":";;;;;;;AACA;;;;;;AAGA,MAAMA,eAAN,CAAsB;AAEpBC,EAAAA,WAAW,GAAG;AAAA;;AACZ,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACD;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACzB,SAAKJ,MAAL,CAAYK,GAAZ,CAAgBF,QAAhB,EAA0BC,KAA1B;AACD;;AACDE,EAAAA,WAAW,CAACH,QAAD,EAAW;AACpB,WAAO,KAAKH,MAAL,CAAYO,GAAZ,CAAgBJ,QAAhB,CAAP;AACD;;AACDK,EAAAA,QAAQ,CAACL,QAAD,EAAW;AACjB,WAAO,KAAKH,MAAL,CAAYS,GAAZ,CAAgBN,QAAhB,CAAP;AACD;;AAbmB;;AAgBtB,MAAMO,mBAAmB,GAAG,OAC1BC,GAD0B,EAE1BC,GAF0B,KAGX;AACf,MAAI,yBAAWD,GAAX,CAAJ,EAAqB;AACnB,QAAIC,GAAG,CAACN,WAAJ,CAAgBK,GAAhB,CAAJ,EAA0B;AACxB;AACA,aAAQC,GAAG,CAACJ,QAAJ,CAAaG,GAAb,CAAR;AACD;;AACD,UAAME,IAAI,GAAG,EAAb;;AACA,SAAK,MAAMC,WAAX,IAA0BH,GAAG,CAACI,UAA9B,EAA0C;AACxCF,MAAAA,IAAI,CAACG,IAAL,EAAU,MAAMN,mBAAmB,CAACI,WAAD,EAAcF,GAAd,CAAnC;AACD;;AAED,UAAMK,MAAM,GAAG,MAAMN,GAAG,CAACO,SAAJ,CAAc,GAAGL,IAAjB,CAArB;AACAD,IAAAA,GAAG,CAACV,SAAJ,CAAcS,GAAd,EAAmBM,MAAnB;AACA,WAAOA,MAAP;AACD;;AACD,QAAM,IAAIE,SAAJ,CAAc,2BAAd,CAAN;AACD,CAnBD;;AAqBA,MAAMC,WAAW,GAAG,OAClBT,GADkB,EAElBU,EAAkC,GAAG,MAAM,CAAE,CAF3B,KAGH;AACf,QAAMT,GAAG,GAAG,IAAId,eAAJ,EAAZ;AACAuB,EAAAA,EAAE,CAACT,GAAD,CAAF;AACA,SAAO,MAAMF,mBAAmB,CAACC,GAAD,EAAMC,GAAN,CAAhC;AACD,CAPD;;eASeQ,W","sourcesContent":["// @flow\nimport isSelector from '../internal/isSelector';\nimport type {App} from '../types';\n\nclass MockEnvironment {\n  values: Map<mixed, mixed>;\n  constructor() {\n    this.values = new Map();\n  }\n  mockValue(selector, value) {\n    this.values.set(selector, value);\n  }\n  hasValueFor(selector) {\n    return this.values.has(selector);\n  }\n  valueFor(selector) {\n    return this.values.get(selector);\n  }\n}\n\nconst runSelectorInternal = async <T>(\n  app: ((T) => App) => App,\n  env: MockEnvironment,\n): Promise<T> => {\n  if (isSelector(app)) {\n    if (env.hasValueFor(app)) {\n      // flowlint-next-line unclear-type: off\n      return (env.valueFor(app): any);\n    }\n    const args = [];\n    for (const selectorApp of app._selectors) {\n      args.push(await runSelectorInternal(selectorApp, env));\n    }\n\n    const result = await app._selector(...args);\n    env.mockValue(app, result);\n    return result;\n  }\n  throw new TypeError('Must pass valid selector.');\n};\n\nconst runSelector = async <T>(\n  app: ((T) => App) => App,\n  fn: (env: MockEnvironment) => void = () => {},\n): Promise<T> => {\n  const env = new MockEnvironment();\n  fn(env);\n  return await runSelectorInternal(app, env);\n};\n\nexport default runSelector;\n"],"file":"runSelector.js"}