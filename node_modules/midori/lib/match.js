"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
Object.defineProperty(exports, "header", {
  enumerable: true,
  get: function () {
    return _header.default;
  }
});
Object.defineProperty(exports, "host", {
  enumerable: true,
  get: function () {
    return _host.default;
  }
});
Object.defineProperty(exports, "method", {
  enumerable: true,
  get: function () {
    return _method.default;
  }
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});
Object.defineProperty(exports, "protocol", {
  enumerable: true,
  get: function () {
    return _protocol.default;
  }
});
Object.defineProperty(exports, "query", {
  enumerable: true,
  get: function () {
    return _query.default;
  }
});

var _header = _interopRequireDefault(require("./match/header"));

var _host = _interopRequireDefault(require("./match/host"));

var _method = _interopRequireDefault(require("./match/method"));

var _path = _interopRequireDefault(require("./match/path"));

var _protocol = _interopRequireDefault(require("./match/protocol"));

var _query = _interopRequireDefault(require("./match/query"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Branch between two apps based on some given predicate.
 * @param {Function} createMatch Predicate to match against.
 * @param {Function} yes App for when the predicate is true.
 * @param {Function} no App for when the predicate is false.
 * @returns {APp} App instance.
 */
function _default(createMatch, yes, no = x => x) {
  return function (app) {
    const match = createMatch(app);
    const yesApp = yes(match.app);
    const noApp = no(match.app);
    return _objectSpread({}, app, {
      upgrade: async (req, socket, head) => {
        const result = await match.matches(req);

        if (result) {
          return await yesApp.upgrade(req, socket, head);
        }

        return await noApp.upgrade(req, socket, head);
      },
      request: async (req, res) => {
        const result = await match.matches(req);

        if (result) {
          return await yesApp.request(req, res);
        }

        return await noApp.request(req, res);
      }
    });
  };
}
//# sourceMappingURL=match.js.map