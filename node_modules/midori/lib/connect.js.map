{"version":3,"sources":["../src/connect.js"],"names":["keys","connect","app","server","TypeError","inst","baseApp","on","req","res","err","requestError","socket","head","upgradeError","forEach","evt","listening","call"],"mappings":";;;;;;;AACA;;;;AAKA,MAAMA,IAAI,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,OAAhC,EAAyC,WAAzC,CAAb;AAEA;;;;;;;;AAOe,SAASC,OAAT,CAAiBC,GAAjB,EAA2BC,MAA3B,EAA2C;AACxD,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAM,IAAIE,SAAJ,CAAc,mCAAd,CAAN;AACD;;AACD,QAAMC,IAAI,GAAGH,GAAG,CAACI,gBAAD,CAAhB;AACAH,EAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjCD,IAAAA,GAAG,CAACD,EAAJ,CAAO,OAAP,EAAiBG,GAAD,IAAS;AACvBL,MAAAA,IAAI,CAACM,YAAL,CAAkBD,GAAlB,EAAuBF,GAAvB,EAA4BC,GAA5B;AACD,KAFD;AAGAA,IAAAA,GAAG,CAACF,EAAJ,CAAO,OAAP,EAAiBG,GAAD,IAAS;AACvBL,MAAAA,IAAI,CAACM,YAAL,CAAkBD,GAAlB,EAAuBF,GAAvB,EAA4BC,GAA5B;AACD,KAFD;AAGD,GAPD;AAQAN,EAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqB,CAACC,GAAD,EAAMI,MAAN,EAAcC,IAAd,KAAuB;AAC1CD,IAAAA,MAAM,CAACL,EAAP,CAAU,OAAV,EAAoBG,GAAD,IAAS;AAC1BL,MAAAA,IAAI,CAACS,YAAL,CAAkBJ,GAAlB,EAAuBF,GAAvB,EAA4BI,MAA5B,EAAoCC,IAApC;AACD,KAFD;AAGAL,IAAAA,GAAG,CAACD,EAAJ,CAAO,OAAP,EAAiBG,GAAD,IAAS;AACvBL,MAAAA,IAAI,CAACS,YAAL,CAAkBJ,GAAlB,EAAuBF,GAAvB,EAA4BI,MAA5B,EAAoCC,IAApC;AACD,KAFD;AAGD,GAPD;AAQAb,EAAAA,IAAI,CAACe,OAAL,CAAcC,GAAD,IAAS;AACpB,QAAI,OAAOX,IAAI,CAACW,GAAD,CAAX,KAAqB,UAAzB,EAAqC;AACnCb,MAAAA,MAAM,CAACI,EAAP,CAAUS,GAAV,EAAeX,IAAI,CAACW,GAAD,CAAnB;AACD;AACF,GAJD;;AAKA,MAAIb,MAAM,CAACc,SAAP,KAAqB,IAAzB,EAA+B;AAC7BZ,IAAAA,IAAI,CAACY,SAAL,CAAeC,IAAf,CAAoBf,MAApB,EAA4BA,MAA5B;AACD;;AACD,SAAOA,MAAP;AACD","sourcesContent":["// @flow\nimport baseApp from './internal/baseApp';\n\nimport type {App} from './types';\nimport type {Server} from 'http';\n\nconst keys = ['request', 'upgrade', 'close', 'error', 'listening'];\n\n/**\n * Wire up an app to an HTTP server instance. Connects all the corresponding\n * event handlers.\n * @param {App} app App to connect to given server.\n * @param {Object} server HTTP server instance to attach listeners to.\n * @returns {Object} The server object.\n */\nexport default function connect(app: App, server: Server) {\n  if (typeof app !== 'function') {\n    throw new TypeError('Must pass valid app to `connect`.');\n  }\n  const inst = app(baseApp);\n  server.on('request', (req, res) => {\n    req.on('error', (err) => {\n      inst.requestError(err, req, res);\n    });\n    res.on('error', (err) => {\n      inst.requestError(err, req, res);\n    });\n  });\n  server.on('upgrade', (req, socket, head) => {\n    socket.on('error', (err) => {\n      inst.upgradeError(err, req, socket, head);\n    });\n    req.on('error', (err) => {\n      inst.upgradeError(err, req, socket, head);\n    });\n  });\n  keys.forEach((evt) => {\n    if (typeof inst[evt] === 'function') {\n      server.on(evt, inst[evt]);\n    }\n  });\n  if (server.listening === true) {\n    inst.listening.call(server, server);\n  }\n  return server;\n}\n"],"file":"connect.js"}