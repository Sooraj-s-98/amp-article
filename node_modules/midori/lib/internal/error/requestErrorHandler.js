"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.createRequestErrorHandler = void 0;

var _environment = require("../environment");

/* eslint-disable no-console */

/* global console process */
const getStatusCode = err => {
  if (typeof err.statusCode === 'number') {
    return err.statusCode;
  } else if (typeof err.status === 'number') {
    return err.status;
  }

  return 500;
};

const createRequestErrorHandler = console => (err, req, res) => {
  const status = getStatusCode(err);
  let message = '';
  let stack = '';

  if (!(0, _environment.isProduction)()) {
    message = `<h2>${err.message}</h2>`;
    stack = `\n<pre>\n${err.stack}\n</pre>`;
  }

  if (res.headersSent || res.finished) {
    console.error('Error occured after response already delivered.');
    console.error('This probably indicates a problem elsewhere.');
    console.error(err);
    return;
  }

  const body = `
<!DOCTYPE html>
<html>
<head>
<title>Error ${status}</title>
<style>
body{font-family: sans-serif; color: #333}
</style>
</head>
<body>
<h1>Error ${status}</h1>
${message}${stack}
</body>
</html>`;
  res.statusCode = status;
  res.setHeader('Connection', 'close');
  res.setHeader('Content-Length', `${Buffer.byteLength(body, 'utf8')}`);
  res.setHeader('Content-Type', 'text/html; charset=utf-8');
  res.end(body);
};

exports.createRequestErrorHandler = createRequestErrorHandler;
const requestErrorHandler = createRequestErrorHandler(console);
var _default = requestErrorHandler;
exports.default = _default;
//# sourceMappingURL=requestErrorHandler.js.map