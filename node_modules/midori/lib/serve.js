"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _send = _interopRequireDefault(require("send"));

var _onFinished = _interopRequireDefault(require("on-finished"));

var _apply = _interopRequireDefault(require("./apply"));

var _request = _interopRequireDefault(require("./request"));

var _response = _interopRequireDefault(require("./response"));

var _halt = _interopRequireDefault(require("./halt"));

var _next = _interopRequireDefault(require("./next"));

var _send2 = _interopRequireDefault(require("./send"));

var _baseUrl = _interopRequireDefault(require("./baseUrl"));

var _url = _interopRequireDefault(require("./url"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const getPath = (baseUrl, pathname) => {
  return pathname.substr(baseUrl.length);
};
/**
 * Server static files with `send`.
 * @param {Object} options Options to pass through to `send`. You can see then
 * list of parameters here: https://www.npmjs.com/package/send
 * @param {Boolean} options.final True to terminate request handling here. You
 * can set this to `false` if you want to keep processing the app chain if a
 * file is not found.
 * @param {Function} options.onDirectory Invoked with a directory path when a
 * directory is encountered. You can use this to do things like provide a
 * directory listing or return some other status. Defaults to returning 204.
 * @returns {App} App instance.
 */


var _default = (_ref) => {
  let {
    final = true,
    onDirectory = () => (0, _send2.default)(204, '')
  } = _ref,
      options = _objectWithoutProperties(_ref, ["final", "onDirectory"]);

  return (0, _apply.default)(_request.default, _response.default, _baseUrl.default, _url.default, (req, res, baseUrl, {
    pathname
  }) => {
    return new Promise((resolve, reject) => {
      const stream = (0, _send.default)(req, getPath(baseUrl, pathname), options);
      (0, _onFinished.default)(res, () => resolve(_halt.default));
      stream.once('error', err => {
        if (err && (err.code === 'ENOENT' || err.status === 404) && !final) {
          resolve(_next.default);
        } else {
          reject(err);
        }
      }).once('directory', (res, path) => {
        resolve(onDirectory(path));
      }).pipe(res);
    });
  });
};

exports.default = _default;
//# sourceMappingURL=serve.js.map