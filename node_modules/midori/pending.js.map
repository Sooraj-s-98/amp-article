{"version":3,"sources":["../src/pending.js"],"names":["defaultOnTimeout","defaultOptions","timeout","onTimeout","pending","trigger","options","req","Promise","resolve","disposer","dispose","timer","setTimeout","fn","newApp","clearTimeout","on"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAYA,MAAMA,gBAAgB,GAAG,sBACvB,qBAAO,GAAP,CADuB,EAEvB,mBAAK,UAAL,CAFuB,CAAzB;AAKA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,KADY;AAErBC,EAAAA,SAAS,EAAEH;AAFU,CAAvB;AAKA;;;;;;;;;;;;;;AAaA,MAAMI,OAAO,GAAG,CAACC,OAAD,EAAmBC,OAAgB,GAAGL,cAAtC,KAA8D;AAC5E,QAAM;AACJC,IAAAA,OAAO,GAAGD,cAAc,CAACC,OADrB;AAEJC,IAAAA,SAAS,GAAGF,cAAc,CAACE;AAFvB,MAGFG,OAHJ;AAIA,SAAO,sBACJC,GAAD,IACE,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvB,QAAIC,QAAQ,GAAG,IAAf;;AACA,UAAMC,OAAO,GAAG,MAAM;AACpB,UAAID,QAAJ,EAAc;AACZA,QAAAA,QAAQ;AACRA,QAAAA,QAAQ,GAAG,IAAX;AACD;AACF,KALD;;AAMA,UAAME,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BF,MAAAA,OAAO;AACPF,MAAAA,OAAO,CAACN,SAAD,CAAP;AACD,KAHuB,EAGrBD,OAHqB,CAAxB;;AAIA,UAAMY,EAAE,GAAIC,MAAD,IAAY;AACrBC,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACAD,MAAAA,OAAO;AACPF,MAAAA,OAAO,CAACM,MAAD,CAAP;AACD,KAJD;;AAKAL,IAAAA,QAAQ,GAAGL,OAAO,CAACS,EAAD,CAAlB;AACAP,IAAAA,GAAG,CAACU,EAAJ,CAAO,OAAP,EAAgBN,OAAhB;AACD,GAnBD,CAFG,CAAP;AAuBD,CA5BD;;eA8BeP,O","sourcesContent":["/* @flow */\nimport compose from './compose';\nimport request from './request';\nimport status from './status';\nimport send from './send';\n\nimport type {App} from './types';\n\ntype Disposer = () => void;\ntype TriggerCallback = (a: App) => void;\ntype Trigger = (c: TriggerCallback) => void | Disposer;\ntype Options = {\n  timeout: number,\n  onTimeout: App,\n};\n\nconst defaultOnTimeout = compose(\n  status(500),\n  send('Timeout.'),\n);\n\nconst defaultOptions = {\n  timeout: 10000,\n  onTimeout: defaultOnTimeout,\n};\n\n/**\n * Pending allows you to wait for a given trigger before continuing the\n * request chain. If this condition is not met within the given timeout then\n * the `onTimeout` app is used instead. If the condition is met then the\n * current app can be replaced.\n * @param {Function} trigger Function invoked during the request which is\n * passed a trigger callback. You call this trigger callback whenever you\n * are ready to continue the request.\n * @param {Object} options Options to control pending behaviour.\n * @param {Number} options.timeout How long to wait before timing out.\n * @param {Object} options.onTimeout App to use when timeout occurs.\n * @returns {App} App instance.\n */\nconst pending = (trigger: Trigger, options: Options = defaultOptions): App => {\n  const {\n    timeout = defaultOptions.timeout,\n    onTimeout = defaultOptions.onTimeout,\n  } = options;\n  return request(\n    (req) =>\n      new Promise((resolve) => {\n        let disposer = null;\n        const dispose = () => {\n          if (disposer) {\n            disposer();\n            disposer = null;\n          }\n        };\n        const timer = setTimeout(() => {\n          dispose();\n          resolve(onTimeout);\n        }, timeout);\n        const fn = (newApp) => {\n          clearTimeout(timer);\n          dispose();\n          resolve(newApp);\n        };\n        disposer = trigger(fn);\n        req.on('close', dispose);\n      }),\n  );\n};\n\nexport default pending;\n"],"file":"pending.js"}