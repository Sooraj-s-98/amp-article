{"version":3,"sources":["../src/proxy.js"],"names":["options","proxy","Proxy","createProxy","onRequest","on","onResponse","app","request","req","res","web","err","requestError","upgrade","socket","head","ws","upgradeError"],"mappings":";;;;;;;AACA;;;;;;;;AA8Be,kBAASA,OAAT,EAAgC;AAC7C,QAAMC,KAAK,GAAGC,mBAAMC,WAAN,EAAd;;AACA,MAAIH,OAAO,CAACI,SAAZ,EAAuB;AACrBH,IAAAA,KAAK,CAACI,EAAN,CAAS,UAAT,EAAqBL,OAAO,CAACI,SAA7B;AACD;;AACD,MAAIJ,OAAO,CAACM,UAAZ,EAAwB;AACtBL,IAAAA,KAAK,CAACI,EAAN,CAAS,UAAT,EAAqBL,OAAO,CAACM,UAA7B;AACD;;AACD,SAAQC,GAAD,IAAS;AACd,6BACKA,GADL;AAEEC,MAAAA,OAAO,CAACC,GAAD,EAAMC,GAAN,EAAW;AAChBT,QAAAA,KAAK,CAACU,GAAN,CAAUF,GAAV,EAAeC,GAAf,EAAoBV,OAApB,EAA8BY,GAAD,IAASL,GAAG,CAACM,YAAJ,CAAiBD,GAAjB,EAAsBH,GAAtB,EAA2BC,GAA3B,CAAtC;AACD,OAJH;;AAKEI,MAAAA,OAAO,CAACL,GAAD,EAAMM,MAAN,EAAcC,IAAd,EAAoB;AACzBf,QAAAA,KAAK,CAACgB,EAAN,CAASR,GAAT,EAAcM,MAAd,EAAsBC,IAAtB,EAA4BhB,OAA5B,EAAsCY,GAAD,IACnCL,GAAG,CAACW,YAAJ,CAAiBN,GAAjB,EAAsBH,GAAtB,EAA2BM,MAA3B,EAAmCC,IAAnC,CADF;AAGD;;AATH;AAWD,GAZD;AAaD","sourcesContent":["// @flow\nimport Proxy from 'http-proxy';\n\nimport type {App} from './types';\nimport type {ClientRequest, IncomingMessage} from 'http';\n\ntype Options = {\n  target?: string | {host: string, port: number},\n  forward?: string,\n  agent?: *,\n  ssl?: *,\n  ws?: boolean,\n  xfwd?: boolean,\n  secure?: boolean,\n  toProxy?: boolean,\n  prependPath?: boolean,\n  ignorePath?: boolean,\n  localAddress?: string,\n  changeOrigin?: boolean,\n  preserveHeaderKeyCase?: boolean,\n  auth?: string,\n  hostRewrite?: boolean,\n  autoRewrite?: boolean,\n  protocolRewrite?: boolean,\n  cookieDomainRewrite?: false | string | {[string]: string},\n  headers?: {[string]: string},\n  proxyTimeout?: number,\n  onRequest?: (ClientRequest) => void,\n  onResponse?: (IncomingMessage) => void,\n};\n\nexport default function(options: Options): App {\n  const proxy = Proxy.createProxy();\n  if (options.onRequest) {\n    proxy.on('proxyReq', options.onRequest);\n  }\n  if (options.onResponse) {\n    proxy.on('proxyRes', options.onResponse);\n  }\n  return (app) => {\n    return {\n      ...app,\n      request(req, res) {\n        proxy.web(req, res, options, (err) => app.requestError(err, req, res));\n      },\n      upgrade(req, socket, head) {\n        proxy.ws(req, socket, head, options, (err) =>\n          app.upgradeError(err, req, socket, head),\n        );\n      },\n    };\n  };\n}\n"],"file":"proxy.js"}