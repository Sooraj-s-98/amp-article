{"version":3,"sources":["../../src/match/path.js"],"names":["isAbsolutePath","path","test","params","WeakMap","baseUrl","_path","TypeError","app","replace","tokens","Array","isArray","keys","regexp","end","matches","req","urlParams","exec","pathname","newParams","get","forEach","name","i","set"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;AAKA,MAAMA,cAAc,GAAIC,IAAD,IAAkB,MAAMC,IAAN,CAAWD,IAAX,CAAzC;;AAIO,MAAME,MAAwC,GAAG,IAAIC,OAAJ,EAAjD;;AACA,MAAMC,OAAyC,GAAG,IAAID,OAAJ,EAAlD;;;eAESE,KAAD,IAAiC;AAC9C,MAAI,CAACN,cAAc,CAACM,KAAD,CAAnB,EAA4B;AAC1B,UAAM,IAAIC,SAAJ,CAAc,0BAAd,CAAN;AACD;;AACD,SAAQC,GAAD,IAAgB;AACrB,UAAMP,IAAI,GAAGK,KAAK,CAACG,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAb;;AACA,UAAMC,MAAM,GAAG,CACb;AACA;AACA,QAAIF,GAAG,IAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAG,CAACE,MAAlB,CAAP,GAAmCF,GAAG,CAACE,MAAvC,GAAgD,EAApD,CAHa,EAIb,IAAIT,IAAI,KAAK,EAAT,GAAc,EAAd,GAAmB,yBAAMA,IAAN,CAAvB,CAJa,CAAf;AAMA,UAAMY,IAA2B,GAAG,EAApC;AACA,UAAMC,MAAM,GAAG,kCAAeJ,MAAf,EAAuBG,IAAvB,EAA6B;AAACE,MAAAA,GAAG,EAAE;AAAN,KAA7B,CAAf,CATqB,CAWrB;AACA;;AACA,WAAO;AACLP,MAAAA,GAAG;AACDE,QAAAA;AADC,SAEEF,GAFF,CADE;AAKLQ,MAAAA,OAAO,EAAGC,GAAD,IAAS;AAChB,cAAMC,SAAS,GAAGJ,MAAM,CAACK,IAAP,CAAY,uBAAIF,GAAJ,EAASG,QAArB,CAAlB;;AACA,YAAIF,SAAJ,EAAe;AACb,gBAAMG,SAA6B,GAAGlB,MAAM,CAACmB,GAAP,CAAWL,GAAX,KAAmB,EAAzD;AACAJ,UAAAA,IAAI,CAACU,OAAL,CAAa,CAAC;AAACC,YAAAA;AAAD,WAAD,EAASC,CAAT,KAAe;AAC1BJ,YAAAA,SAAS,CAACG,IAAD,CAAT,GAAkBN,SAAS,CAACO,CAAC,GAAG,CAAL,CAA3B;AACD,WAFD;AAGAtB,UAAAA,MAAM,CAACuB,GAAP,CAAWT,GAAX,EAAgBI,SAAhB;AACAhB,UAAAA,OAAO,CAACqB,GAAR,CAAYT,GAAZ,EAAiBC,SAAS,CAAC,CAAD,CAA1B;AACA,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD;AAjBI,KAAP;AAmBD,GAhCD;AAiCD,C","sourcesContent":["// @flow\nimport url from 'parseurl';\nimport {parse, tokensToRegExp} from 'path-to-regexp';\n\nimport type {IncomingMessage} from 'http';\nimport type {MatchCreator, Match} from '../types';\n\nconst isAbsolutePath = (path: string) => /^\\//.test(path);\n\ntype Params = {[string]: string};\n\nexport const params: WeakMap<IncomingMessage, Params> = new WeakMap();\nexport const baseUrl: WeakMap<IncomingMessage, string> = new WeakMap();\n\nexport default (_path: string): MatchCreator => {\n  if (!isAbsolutePath(_path)) {\n    throw new TypeError('Must give absolute path.');\n  }\n  return (app): Match => {\n    const path = _path.replace(/\\/$/, '');\n    const tokens = [\n      // TODO: FIXME: Make flow happy.\n      // $ExpectError\n      ...(app && Array.isArray(app.tokens) ? app.tokens : []),\n      ...(path === '' ? [] : parse(path)),\n    ];\n    const keys: Array<{name: string}> = [];\n    const regexp = tokensToRegExp(tokens, keys, {end: false});\n\n    // TODO: FIXME: Make flow happy.\n    // $ExpectError\n    return {\n      app: {\n        tokens,\n        ...app,\n      },\n      matches: (req) => {\n        const urlParams = regexp.exec(url(req).pathname);\n        if (urlParams) {\n          const newParams: {[string]: string} = params.get(req) || {};\n          keys.forEach(({name}, i) => {\n            newParams[name] = urlParams[i + 1];\n          });\n          params.set(req, newParams);\n          baseUrl.set(req, urlParams[0]);\n          return true;\n        }\n        return false;\n      },\n    };\n  };\n};\n"],"file":"path.js"}