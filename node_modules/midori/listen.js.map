{"version":3,"sources":["../src/listen.js"],"names":["listen","app","rest","server"],"mappings":";;;;;;;AACA;;AACA;;;;AAcA;;;;;;;AAOA,MAAMA,MAAc,GAAG,CAACC,GAAD,EAAW,GAAGC,IAAd,KAAiC;AACtD,QAAMC,MAAM,GAAG,yBAAf;AACA,wBACEF,GADF,EAEEE,MAFF,EAFsD,CAMtD;AACA;;AACAA,EAAAA,MAAM,CAACH,MAAP,CAAc,GAAGE,IAAjB;AACA,SAAOC,MAAP;AACD,CAVD;;eAYeH,M","sourcesContent":["// @flow\nimport connect from './connect';\nimport {createServer} from 'http';\n\nimport type {App} from './types';\nimport type {Server} from 'http';\n\ntype Callback = () => void;\n\ntype Listen = {\n  (app: App, port: number): Server,\n  (app: App, port: number, host: string): Server,\n  (app: App, port: number, callback: Callback): Server,\n  (app: App, callback: Callback): Server,\n};\n\n/**\n * Convenience function to create an HTTP server and automatically connect to it\n * and start listening. The first argument is an app, but the rest are whatever\n * the http server's `listen` function accepts. (e.g. port, callback, etc.)\n * @param {App} app App instance.\n * @returns {Server} HTTP server instance.\n */\nconst listen: Listen = (app: App, ...rest: Array<*>) => {\n  const server = createServer();\n  connect(\n    app,\n    server,\n  );\n  // TODO: FIXME: Make flow happy with this.\n  // $ExpectError\n  server.listen(...rest);\n  return server;\n};\n\nexport default listen;\n"],"file":"listen.js"}