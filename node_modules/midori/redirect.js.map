{"version":3,"sources":["../src/redirect.js"],"names":["normalize2","url","TypeError","normalize","statusCode","redirect","args","length","Location"],"mappings":";;;;;;;AACA;;AACA;;;;AAgBA,MAAMA,UAAU,GAAIC,GAAD,IAA+B;AAChD,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3B,WAAOA,GAAP;AACD,GAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,WAAO,iBAAOA,GAAP,CAAP;AACD;;AACD,QAAM,IAAIC,SAAJ,CAAe,iBAAgBD,GAAI,GAAnC,CAAN;AACD,CAPD;;AASA,MAAME,SAAS,GAAG,CAACC,UAAD,EAAqBH,GAArB,KAAsD;AACtE,SAAO;AACLG,IAAAA,UADK;AAELH,IAAAA,GAAG,EAAED,UAAU,CAACC,GAAD;AAFV,GAAP;AAID,CALD;AAOA;;;;;;;;AAMA,MAAMI,QAAkB,GAAG,CAAC,GAAGC,IAAJ,KAAkB;AAC3C;AACA,QAAM;AAACL,IAAAA,GAAD;AAAMG,IAAAA;AAAN,MAAoBD,SAAS,EACjC;AACAG,EAAAA,IAAI,CAACC,MAAL,GAAc,CAAd,GAAkBD,IAAI,CAAC,CAAD,CAAtB,GAA4B,GAFK,EAGjC;AACAA,EAAAA,IAAI,CAACC,MAAL,IAAe,CAAf,GAAmBD,IAAI,CAAC,CAAD,CAAvB,GAA6BA,IAAI,CAAC,CAAD,CAJA,CAAnC;AAMA,SAAO,mBACLF,UADK,EAEL;AACEI,IAAAA,QAAQ,EAAEP;AADZ,GAFK,EAKL,EALK,CAAP;AAOD,CAfD;;eAiBeI,Q","sourcesContent":["// @flow\nimport send from './send';\nimport {format} from 'url';\n\nimport type {App} from './types';\n\ntype Redirect = {\n  (url: URL): App,\n  (url: string): App,\n  (statusCode: number, url: string): App,\n  (statusCode: number, url: URL): App,\n};\n\ntype Normalize = {\n  statusCode: number,\n  url: string,\n};\n\nconst normalize2 = (url: string | URL): string => {\n  if (typeof url === 'string') {\n    return url;\n  } else if (typeof url === 'object') {\n    return format(url);\n  }\n  throw new TypeError(`Invalid url: \"${url}\"`);\n};\n\nconst normalize = (statusCode: number, url: string | URL): Normalize => {\n  return {\n    statusCode,\n    url: normalize2(url),\n  };\n};\n\n/**\n * Redirect somewhere. Ends the app chain.\n * @param {?Number} statusCode The status code to send back, defaults to 302.\n * @param {String|Object|Function} url The url to redirect to.\n * @returns {App} App instance.\n */\nconst redirect: Redirect = (...args): App => {\n  // TODO: FIXME: How to get flow happy with this?\n  const {url, statusCode} = normalize(\n    // $ExpectError\n    args.length > 1 ? args[0] : 302,\n    // $ExpectError\n    args.length <= 1 ? args[0] : args[1],\n  );\n  return send(\n    statusCode,\n    {\n      Location: url,\n    },\n    '',\n  );\n};\n\nexport default redirect;\n"],"file":"redirect.js"}