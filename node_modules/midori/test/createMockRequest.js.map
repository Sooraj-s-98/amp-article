{"version":3,"sources":["../../src/test/createMockRequest.js"],"names":["createMockRequest","options","reqBodyStream","ensureReqBody","body","Buffer","isBuffer","read","TypeError","rawHeaders","headers","Object","keys","forEach","k","toLowerCase","req","method","url","args","pipe","on","once","removeListener","connection","encrypted","socket","_handle","offline"],"mappings":"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","sourcesContent":["// @flow\nimport bl from 'bl';\nimport type {Readable} from 'stream';\n\ntype Options = {\n  url?: string,\n  method?: string,\n  body?: string | Buffer | Readable,\n  headers?: {[string]: string},\n  offline?: boolean,\n  encrypted?: boolean,\n};\n\nconst createMockRequest = (options: Options) => {\n  let reqBodyStream: Readable;\n  const ensureReqBody = () => {\n    if (!reqBodyStream) {\n      if (typeof options.body === 'string' || Buffer.isBuffer(options.body)) {\n        reqBodyStream = bl(options.body);\n      } else if (options.body && typeof options.body.read === 'function') {\n        // flowlint-next-line unclear-type: off\n        reqBodyStream = (options.body: any);\n      } else if (typeof options.body === 'undefined') {\n        reqBodyStream = bl('');\n      } else {\n        throw new TypeError('Invalid request body given.');\n      }\n    }\n  };\n  const rawHeaders = options.headers || {};\n  Object.keys(rawHeaders).forEach((k) => {\n    rawHeaders[k.toLowerCase()] = rawHeaders[k];\n  });\n  const req = {\n    method: typeof options.method === 'string' ? options.method : 'GET',\n    url: typeof options.url === 'string' ? options.url : '/',\n    headers: rawHeaders,\n    // flowlint-next-line unclear-type: off\n    read: (...args: any) => {\n      ensureReqBody();\n      return reqBodyStream.read(...args);\n    },\n    // flowlint-next-line unclear-type: off\n    pipe: (...args: any) => {\n      ensureReqBody();\n      return reqBodyStream.pipe(...args);\n    },\n    // flowlint-next-line unclear-type: off\n    on: (...args: any) => {\n      ensureReqBody();\n      reqBodyStream.on(...args);\n      return req;\n    },\n    // flowlint-next-line unclear-type: off\n    once: (...args: any) => {\n      ensureReqBody();\n      reqBodyStream.on(...args);\n      return req;\n    },\n    // flowlint-next-line unclear-type: off\n    removeListener: (...args: any) => {\n      ensureReqBody();\n      reqBodyStream.removeListener(...args);\n      return req;\n    },\n    connection: {\n      encrypted: options.encrypted,\n    },\n    // TODO: Consider stubbing more of this?\n    socket: {\n      _handle: options.offline === true ? null : 1,\n    },\n    // flowlint-next-line unsafe-getters-setters:off\n    get body() {\n      ensureReqBody();\n      return reqBodyStream;\n    },\n  };\n  return req;\n};\n\nexport default createMockRequest;\n"],"file":"createMockRequest.js"}