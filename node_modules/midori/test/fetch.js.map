{"version":3,"sources":["../../src/test/fetch.js"],"names":["fetch","App","url","_options","globalError","options","stub","request","onNext","requestError","err","onError","upgradeError","error","close","upgrade","listening","TypeError","app","req","method","headers","body","encrypted","offline","res","mapRequest","realRes","result","connection","toLowerCase","socket","Buffer","mock","statusCode","statusMessage","headersSent","finished","Promise","reject","bodyActive"],"mappings":"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","sourcesContent":["/* @flow */\nimport createMockRequest from './createMockRequest';\nimport createMockResponse from './createMockResponse';\n\nimport type {App} from '../types';\nimport type {IncomingMessage, ServerResponse} from 'http';\nimport type {Readable} from 'stream';\nimport type {Socket} from 'net';\nimport {getUpgradeResponse} from '../response';\n\ntype Options = {\n  method: string,\n  headers: {[string]: string},\n  body: string | Buffer | Readable,\n  encrypted: boolean,\n  offline: boolean,\n  onError: (err: Error) => void,\n  onNext: () => void,\n  mapRequest: (req: IncomingMessage) => IncomingMessage,\n};\n\ntype MockedResponse = ServerResponse & {\n  statusMessage: ?string,\n  body: ?Promise<string>,\n  bodyActive: boolean,\n  headers: {[string]: string | Array<string>},\n  result: mixed,\n  error: ?Error,\n  socket: Socket,\n};\n\nconst fetch = async (\n  App: App,\n  url?: string,\n  _options?: Options,\n): Promise<MockedResponse> => {\n  let globalError = null;\n  const options = _options || {};\n  const stub: App = {\n    request: () => {\n      options.onNext && options.onNext();\n    },\n    requestError: (err: Error) => {\n      globalError = err;\n      options.onError && options.onError(err);\n    },\n    upgradeError: (err: Error) => {\n      globalError = err;\n      options.onError && options.onError(err);\n    },\n    // TODO: Do we need to check for errors here?\n    error: /* istanbul ignore next */ () => {},\n    close: () => {},\n    upgrade: () => {\n      options.onNext && options.onNext();\n    },\n    listening: () => {},\n  };\n  if (typeof App !== 'function') {\n    throw new TypeError('Must pass valid app to `fetch`.');\n  }\n  const app = App(stub);\n\n  let req = createMockRequest({\n    url,\n    method: options.method,\n    headers: options.headers,\n    body: options.body,\n    encrypted: options.encrypted,\n    offline: options.offline,\n  });\n  const res = createMockResponse();\n\n  if (options.mapRequest) {\n    // $ExpectError\n    req = options.mapRequest((req: any));\n  }\n\n  // TODO: FIXME: Any better way of casting through `any`?\n  // flowlint-next-line unclear-type: off\n  const realRes: MockedResponse = (res: any);\n  let result;\n  if (\n    typeof req.headers.connection === 'string' &&\n    req.headers.connection.toLowerCase() === 'upgrade'\n  ) {\n    // flowlint-next-line unclear-type: off\n    result = await app.upgrade((req: any), (res.socket: any), new Buffer(''));\n  } else {\n    // flowlint-next-line unclear-type: off\n    result = await app.request((req: any), realRes);\n  }\n\n  // flowlint-next-line unclear-type: off\n  const mock = getUpgradeResponse((req: any));\n  if (mock) {\n    res.headers = mock.headers;\n    res.statusCode = mock.statusCode;\n    res.statusMessage = mock.statusMessage;\n    res.headersSent = mock.headersSent;\n    res.finished = mock.finished;\n  }\n  if (globalError && !options.onError) {\n    return Promise.reject(globalError);\n  }\n  realRes.error = globalError;\n  realRes.result = result;\n  if (res.bodyActive) {\n    // FIXME: flow being stupid again\n    // $ExpectError\n    realRes.body = await res.body;\n    return realRes;\n  }\n  return realRes;\n};\n\nexport default fetch;\n"],"file":"fetch.js"}