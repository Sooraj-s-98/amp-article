{"version":3,"sources":["../../src/test/createMockResponse.js"],"names":["createMockResponse","res","ensureBody","body","Promise","resolve","reject","bodyStream","err","result","toString","socket","write","args","bodyActive","end","on","once","emit","removeListener","writable","Object","assign","headers","statusCode","undefined","statusMessage","headersSent","finished","getHeader","name","toLowerCase","writeHead","msg","keys","forEach","k","removeHeader","n","setHeader","v","apply"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable no-use-before-define */\nimport bl from 'bl';\nimport type {ServerResponse} from 'http';\nimport type {Socket} from 'net';\n\ntype MockedResponse = ServerResponse & {\n  socket: Socket,\n  statusMessage: ?string,\n  body: ?Promise<string>,\n  bodyActive: boolean,\n  headers: {[string]: string | Array<string>},\n};\n\nconst createMockResponse = (): MockedResponse => {\n  const res = {};\n\n  const ensureBody = () => {\n    if (!res.body) {\n      res.body = new Promise((resolve, reject) => {\n        res.bodyStream = bl((err, result) => {\n          err ? reject(err) : resolve(result.toString('utf8'));\n        });\n      });\n    }\n  };\n\n  const socket = {\n    write(...args) {\n      res.bodyActive = true;\n      ensureBody();\n      return res.bodyStream.write(...args);\n    },\n    end(...args) {\n      res.bodyActive = true;\n      ensureBody();\n      return res.bodyStream.end(...args);\n    },\n    on(...args) {\n      if (args[0] === 'unpipe') {\n        res.bodyActive = true;\n      }\n      ensureBody();\n      res.bodyStream.on(...args);\n      return this;\n    },\n    once(...args) {\n      ensureBody();\n      res.bodyStream.once(...args);\n      return this;\n    },\n    emit(...args) {\n      ensureBody();\n      res.bodyStream.emit(...args);\n      return this;\n    },\n    removeListener(...args) {\n      ensureBody();\n      res.bodyStream.removeListener(...args);\n      return this;\n    },\n    // flowlint-next-line unsafe-getters-setters:off\n    get writable() {\n      ensureBody();\n      return res.bodyStream.writable;\n    },\n  };\n\n  Object.assign(res, socket, {\n    headers: {},\n    statusCode: undefined,\n    statusMessage: undefined,\n    headersSent: false,\n    finished: false,\n    socket,\n    getHeader(name) {\n      return this.headers[name.toLowerCase()];\n    },\n    writeHead: (statusCode, msg, headers) => {\n      res.statusCode = statusCode;\n      if (typeof msg === 'string') {\n        res.statusMessage = msg;\n      }\n      if (typeof headers === 'undefined' && typeof msg === 'object') {\n        Object.assign(res.headers, msg);\n      } else if (typeof headers === 'object') {\n        Object.assign(res.headers, headers);\n      }\n      Object.keys(res.headers).forEach((k) => {\n        res.headers[k.toLowerCase()] = res.headers[k];\n      });\n      res.headersSent = true;\n    },\n    removeHeader: (n) => {\n      delete res.headers[n];\n      delete res.headers[n.toLowerCase()];\n    },\n    setHeader: (n, v) => {\n      res.headers[n] = v;\n      res.headers[n.toLowerCase()] = v;\n    },\n    write(...args) {\n      this.headersSent = true;\n      return socket.write.apply(this, args);\n    },\n    end(...args) {\n      this.headersSent = true;\n      return socket.end.apply(this, args);\n    },\n  });\n\n  // flowlint-next-line unclear-type: off\n  return (res: any);\n};\n\nexport default createMockResponse;\n"],"file":"createMockResponse.js"}