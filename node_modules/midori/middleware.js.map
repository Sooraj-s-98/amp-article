{"version":3,"sources":["../src/middleware.js"],"names":["handleBasic","handler","app","request","req","res","err","requestError","handleCallback","Promise","resolve","reject","handleError","response","next","length","TypeError"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAoBA,MAAMA,WAAW,GAAIC,OAAD,IAA2B;AAC7C,SAAQC,GAAD,sBACFA,GADE;AAELC,IAAAA,OAAO,EAAE,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAI;AACFJ,QAAAA,OAAO,CAACG,GAAD,EAAMC,GAAN,CAAP;AACA,eAAO,IAAP;AACD,OAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,eAAO,MAAMJ,GAAG,CAACK,YAAJ,CAAiBD,GAAjB,EAAsBF,GAAtB,EAA2BC,GAA3B,CAAb;AACD;AACF;AATI,IAAP;AAWD,CAZD;;AAcA,MAAMG,cAAc,GAAIP,OAAD,IAA8B;AACnD,SAAQC,GAAD,sBACFA,GADE;AAELC,IAAAA,OAAO,EAAE,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC3B,UAAI;AACF,cAAM,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCV,UAAAA,OAAO,CAACG,GAAD,EAAMC,GAAN,EAAYC,GAAD,IAAS;AACzBA,YAAAA,GAAG,GAAGK,MAAM,CAACL,GAAD,CAAT,GAAiBI,OAAO,EAA3B;AACD,WAFM,CAAP;AAGD,SAJK,CAAN;AAKA,eAAO,MAAMR,GAAG,CAACC,OAAJ,CAAYC,GAAZ,EAAiBC,GAAjB,CAAb;AACD,OAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,eAAO,MAAMJ,GAAG,CAACK,YAAJ,CAAiBD,GAAjB,EAAsBF,GAAtB,EAA2BC,GAA3B,CAAb;AACD;AACF;AAbI,IAAP;AAeD,CAhBD;;AAkBA,MAAMO,WAAW,GAAIX,OAAD,IAA2B;AAC7C,SAAO,oBAAOK,GAAD,IAAgB;AAC3B,WAAO,oBAAMH,gBAAN,EAAeU,iBAAf,EAAyB,CAACT,GAAD,EAAMC,GAAN,KAAc;AAC5C,aAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCV,QAAAA,OAAO,CAACK,GAAD,EAAMF,GAAN,EAAWC,GAAX,EAAiBC,GAAD,IAAS;AAC9B,cAAIA,GAAJ,EAAS;AACP,mBAAOK,MAAM,CAACL,GAAD,CAAb;AACD;;AACD,iBAAOI,OAAO,CAACI,aAAD,CAAd;AACD,SALM,CAAP;AAMD,OAPM,CAAP;AAQD,KATM,CAAP;AAUD,GAXM,CAAP;AAYD,CAbD;AAeA;;;;;;;eAKgBb,OAAD,IAA2B;AACxC,MAAIA,OAAO,CAACc,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAOf,WAAW,CAAEC,OAAF,CAAlB;AACD,GAFD,MAEO,IAAIA,OAAO,CAACc,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,WAAOP,cAAc,CAAEP,OAAF,CAArB;AACD,GAFM,MAEA,IAAIA,OAAO,CAACc,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,WAAOH,WAAW,CAAEX,OAAF,CAAlB;AACD;;AACD,QAAM,IAAIe,SAAJ,EAAN;AACD,C","sourcesContent":["// @flow\nimport apply from './apply';\nimport request from './request';\nimport response from './response';\nimport error from './error';\nimport next from './next';\n\nimport type {IncomingMessage, ServerResponse} from 'http';\nimport type {App} from './types';\n\ntype Callback = (err: ?Error) => void;\ntype BasicHandler = (req: IncomingMessage, res: ServerResponse) => void;\ntype CallbackHandler = (\n  req: IncomingMessage,\n  res: ServerResponse,\n  next: Callback,\n) => void;\ntype ErrorHandler = (\n  err: Error,\n  req: IncomingMessage,\n  res: ServerResponse,\n  next: Callback,\n) => void;\ntype Handler = BasicHandler & CallbackHandler & ErrorHandler;\n\nconst handleBasic = (handler: BasicHandler) => {\n  return (app) => ({\n    ...app,\n    request: async (req, res) => {\n      try {\n        handler(req, res);\n        return null;\n      } catch (err) {\n        return await app.requestError(err, req, res);\n      }\n    },\n  });\n};\n\nconst handleCallback = (handler: CallbackHandler) => {\n  return (app) => ({\n    ...app,\n    request: async (req, res) => {\n      try {\n        await new Promise((resolve, reject) => {\n          handler(req, res, (err) => {\n            err ? reject(err) : resolve();\n          });\n        });\n        return await app.request(req, res);\n      } catch (err) {\n        return await app.requestError(err, req, res);\n      }\n    },\n  });\n};\n\nconst handleError = (handler: ErrorHandler) => {\n  return error((err: Error) => {\n    return apply(request, response, (req, res) => {\n      return new Promise((resolve, reject) => {\n        handler(err, req, res, (err) => {\n          if (err) {\n            return reject(err);\n          }\n          return resolve(next);\n        });\n      });\n    });\n  });\n};\n\n/**\n * Handle express-style middleware.\n * @param {Function} handler Express-style middleware.\n * @returns {App} App instance.\n */\nexport default (handler: Handler): App => {\n  if (handler.length === 2) {\n    return handleBasic((handler: BasicHandler));\n  } else if (handler.length === 3) {\n    return handleCallback((handler: CallbackHandler));\n  } else if (handler.length === 4) {\n    return handleError((handler: ErrorHandler));\n  }\n  throw new TypeError();\n};\n"],"file":"middleware.js"}