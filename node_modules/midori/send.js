"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sendStream = void 0;

var _response = _interopRequireDefault(require("./response"));

var _halt = _interopRequireDefault(require("./halt"));

var _stream = require("stream");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const handleHead = (res, status, headers) => {
  if (typeof status === 'number' || headers) {
    // $ExpectError
    res.writeHead(status, headers);
  }
};

const sendBinary = (status, headers, body) => {
  return (0, _response.default)(res => {
    // 'utf8' here is only applicable if the body is a string
    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8').toString());
    handleHead(res, status, headers);
    res.end(body);
    return _halt.default;
  });
};

const sendStream = (status, headers, body) => {
  return (0, _response.default)(res => {
    handleHead(res, status, headers);
    body.pipe(res);
    return _halt.default;
  });
};

exports.sendStream = sendStream;

/**
 * Send content to the client.
 * @param {Number} status Status code to send.
 * @param {Object} headers Headers to send.
 * @param {String|Buffer|Readable} body Data to send.
 * @returns {App} App instance.
 */
const send = (...rest) => {
  let body;
  let status = 200;
  let headers;

  if (rest.length === 3) {
    // $ExpectError
    status = rest[0]; // $ExpectError

    headers = rest[1]; // $ExpectError

    body = rest[2];
  } else if (rest.length === 2) {
    // $ExpectError
    status = rest[0]; // $ExpectError

    body = rest[1];
  } else if (rest.length === 1) {
    // $ExpectError
    body = rest[0];
  } else {
    throw new TypeError('`send` expects 1, 2 or 3 arguments.');
  }

  if (typeof body === 'string' || Buffer.isBuffer(body)) {
    // TODO: FIXME: Why does flow hate this?
    // $ExpectError
    return sendBinary(status, headers, body);
  } else if (body && typeof body.pipe === 'function') {
    // TODO: FIXME: Why does flow hate this?
    // $ExpectError
    return sendStream(status, headers, body);
  }

  throw new TypeError('Invalid value given to `send`.');
};

var _default = send;
exports.default = _default;
//# sourceMappingURL=send.js.map