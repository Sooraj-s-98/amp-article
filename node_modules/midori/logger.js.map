{"version":3,"sources":["../src/logger.js"],"names":["identity","x","consoleObject","console","setConsole","c","formatResponseTime","duration","toFixed","codeColors","chalk","white","green","cyan","yellow","red","formatStatusCode","statusCode","color","reduce","value","newColor","logger","app","request","response","timing","headers","_fn","_p","req","res","line","method","url","filter","join","log"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAQA,MAAMA,QAAQ,GAAIC,CAAD,IAAOA,CAAxB;;AAEA,IAAIC,aAAsB,GAAGC,OAA7B;;AAEO,MAAMC,UAAU,GAAIC,CAAD,IAAiBH,aAAa,GAAGG,CAApD;;;;AAEA,MAAMC,kBAAkB,GAAIC,QAAD,IAAgC;AAChE,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAQ,GAAEA,QAAQ,CAACC,OAAT,CAAiB,CAAjB,CAAoB,IAA9B;AACD;;AACD,SAAO,IAAP;AACD,CALM;;;AAOP,MAAMC,UAAU,GAAG,CACjB,CAAC,GAAD,EAAMC,eAAMC,KAAZ,CADiB,EAEjB,CAAC,GAAD,EAAMD,eAAME,KAAZ,CAFiB,EAGjB,CAAC,GAAD,EAAMF,eAAMG,IAAZ,CAHiB,EAIjB,CAAC,GAAD,EAAMH,eAAMI,MAAZ,CAJiB,EAKjB,CAAC,GAAD,EAAMJ,eAAMK,GAAZ,CALiB,CAAnB;;AAQO,MAAMC,gBAAgB,GAAIC,UAAD,IAAwB;AACtD,QAAMC,KAAK,GAAGT,UAAU,CAACU,MAAX,CAAkB,CAACD,KAAD,EAAQ,CAACE,KAAD,EAAQC,QAAR,CAAR,KAA8B;AAC5D,QAAIJ,UAAU,IAAIG,KAAlB,EAAyB;AACvB,aAAOC,QAAP;AACD;;AACD,WAAOH,KAAP;AACD,GALa,EAKXlB,QALW,CAAd;AAMA,SAAOkB,KAAK,CAACD,UAAD,CAAZ;AACD,CARM;;;;AAUP,MAAMK,MAAM,GAAIC,GAAD,IAA2B;AACxC,SAAO,oBACLC,gBADK,EAELC,iBAFK,EAGLC,gBAAOC,OAHF,EAIL;AACA;AACCC,EAAAA,GAAD,IAAUC,EAAD,IAAQ;AACf,WAAON,GAAP;AACD,GARI,EASL,CAACO,GAAD,EAAMC,GAAN,EAAWL,MAAX,EAAmBzB,CAAnB,KAAyB;AACvB,UAAM+B,IAAI,GAAG,CACXhB,gBAAgB,CAACe,GAAG,CAACd,UAAL,CADL,EAEXP,eAAMC,KAAN,CAAYmB,GAAG,CAACG,MAAhB,CAFW,EAGXH,GAAG,CAACI,GAHO,EAIX5B,kBAAkB,CAACoB,MAAD,CAJP,EAMVS,MANU,CAMHnC,QANG,EAOVoC,IAPU,CAOL,GAPK,CAAb;AAQAlC,IAAAA,aAAa,CAACmC,GAAd,CAAkBL,IAAlB;AACA,WAAO,mBAAK/B,CAAL,CAAP;AACD,GApBI,EAqBLsB,GArBK,CAAP;AAsBD,CAvBD;;eAyBeD,M","sourcesContent":["// @flow\nimport chalk from 'chalk';\nimport request from './request';\nimport response from './response';\nimport apply from './apply';\nimport timing from './timing';\nimport pure from './pure';\n\nimport type {InternalInstance} from './types';\n\ntype Console = {\n  +log: (x: string) => void,\n};\n\nconst identity = (x) => x;\n\nlet consoleObject: Console = console;\n\nexport const setConsole = (c: Console) => (consoleObject = c);\n\nexport const formatResponseTime = (duration: ?number): ?string => {\n  if (typeof duration === 'number') {\n    return `${duration.toFixed(3)}ms`;\n  }\n  return null;\n};\n\nconst codeColors = [\n  [100, chalk.white],\n  [200, chalk.green],\n  [300, chalk.cyan],\n  [400, chalk.yellow],\n  [500, chalk.red],\n];\n\nexport const formatStatusCode = (statusCode: number) => {\n  const color = codeColors.reduce((color, [value, newColor]) => {\n    if (statusCode >= value) {\n      return newColor;\n    }\n    return color;\n  }, identity);\n  return color(statusCode);\n};\n\nconst logger = (app: InternalInstance) => {\n  return apply(\n    request,\n    response,\n    timing.headers,\n    // FIXME: This is kind of a hack for being able put the logger at the start\n    // of the compose declaration but have it resolve _AFTER_ the entire app.\n    (_fn) => (_p) => {\n      return app;\n    },\n    (req, res, timing, x) => {\n      const line = [\n        formatStatusCode(res.statusCode),\n        chalk.white(req.method),\n        req.url,\n        formatResponseTime(timing),\n      ]\n        .filter(identity)\n        .join(' ');\n      consoleObject.log(line);\n      return pure(x);\n    },\n  )(app);\n};\n\nexport default logger;\n"],"file":"logger.js"}