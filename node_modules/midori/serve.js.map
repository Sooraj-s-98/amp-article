{"version":3,"sources":["../src/serve.js"],"names":["getPath","baseUrl","pathname","substr","length","final","onDirectory","options","request","response","url","req","res","Promise","resolve","reject","stream","halt","once","err","code","status","next","path","pipe"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAqBA,MAAMA,OAAO,GAAG,CAACC,OAAD,EAAkBC,QAAlB,KAA+C;AAC7D,SAAOA,QAAQ,CAACC,MAAT,CAAgBF,OAAO,CAACG,MAAxB,CAAP;AACD,CAFD;AAIA;;;;;;;;;;;;;;eAYe;AAAA,MAAC;AACdC,IAAAA,KAAK,GAAG,IADM;AAEdC,IAAAA,WAAW,GAAG,MAAM,oBAAM,GAAN,EAAW,EAAX;AAFN,GAAD;AAAA,MAGVC,OAHU;;AAAA,SAKb,oBAAMC,gBAAN,EAAeC,iBAAf,EAAyBR,gBAAzB,EAAkCS,YAAlC,EAAuC,CAACC,GAAD,EAAMC,GAAN,EAAWX,OAAX,EAAoB;AAACC,IAAAA;AAAD,GAApB,KAAmC;AACxE,WAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAM,GAAG,mBAAKL,GAAL,EAAUX,OAAO,CAACC,OAAD,EAAUC,QAAV,CAAjB,EAAsCK,OAAtC,CAAf;AACA,+BAAWK,GAAX,EAAgB,MAAME,OAAO,CAACG,aAAD,CAA7B;AACAD,MAAAA,MAAM,CACHE,IADH,CACQ,OADR,EACkBC,GAAD,IAAS;AACtB,YAAIA,GAAG,KAAKA,GAAG,CAACC,IAAJ,KAAa,QAAb,IAAyBD,GAAG,CAACE,MAAJ,KAAe,GAA7C,CAAH,IAAwD,CAAChB,KAA7D,EAAoE;AAClES,UAAAA,OAAO,CAACQ,aAAD,CAAP;AACD,SAFD,MAEO;AACLP,UAAAA,MAAM,CAACI,GAAD,CAAN;AACD;AACF,OAPH,EAQGD,IARH,CAQQ,WARR,EAQqB,CAACN,GAAD,EAAMW,IAAN,KAAe;AAChCT,QAAAA,OAAO,CAACR,WAAW,CAACiB,IAAD,CAAZ,CAAP;AACD,OAVH,EAWGC,IAXH,CAWQZ,GAXR;AAYD,KAfM,CAAP;AAgBD,GAjBD,CALa;AAAA,C","sourcesContent":["// @flow\nimport send from 'send';\nimport onFinished from 'on-finished';\nimport apply from './apply';\nimport request from './request';\nimport response from './response';\nimport halt from './halt';\nimport next from './next';\nimport write from './send';\nimport baseUrl from './baseUrl';\nimport url from './url';\n\nimport type {App} from './types';\n\ntype Options = {\n  final?: boolean,\n  onDirectory?: (directory: string) => App,\n  acceptRanges?: boolean,\n  cacheControl?: boolean,\n  dotfiles?: 'allow' | 'deny' | 'ignore',\n  end?: number,\n  etag?: boolean,\n  extensions?: Array<string>,\n  immutable?: boolean,\n  index?: boolean,\n  lastModified?: boolean,\n  maxAge?: number | string,\n  root: string,\n  start?: number,\n};\n\nconst getPath = (baseUrl: string, pathname: string): string => {\n  return pathname.substr(baseUrl.length);\n};\n\n/**\n * Server static files with `send`.\n * @param {Object} options Options to pass through to `send`. You can see then\n * list of parameters here: https://www.npmjs.com/package/send\n * @param {Boolean} options.final True to terminate request handling here. You\n * can set this to `false` if you want to keep processing the app chain if a\n * file is not found.\n * @param {Function} options.onDirectory Invoked with a directory path when a\n * directory is encountered. You can use this to do things like provide a\n * directory listing or return some other status. Defaults to returning 204.\n * @returns {App} App instance.\n */\nexport default ({\n  final = true,\n  onDirectory = () => write(204, ''),\n  ...options\n}: Options): App =>\n  apply(request, response, baseUrl, url, (req, res, baseUrl, {pathname}) => {\n    return new Promise((resolve, reject) => {\n      const stream = send(req, getPath(baseUrl, pathname), options);\n      onFinished(res, () => resolve(halt));\n      stream\n        .once('error', (err) => {\n          if (err && (err.code === 'ENOENT' || err.status === 404) && !final) {\n            resolve(next);\n          } else {\n            reject(err);\n          }\n        })\n        .once('directory', (res, path) => {\n          resolve(onDirectory(path));\n        })\n        .pipe(res);\n    });\n  });\n"],"file":"serve.js"}