{"version":3,"sources":["../../../src/internal/error/requestErrorHandler.js"],"names":["getStatusCode","err","statusCode","status","createRequestErrorHandler","console","req","res","message","stack","headersSent","finished","error","body","setHeader","Buffer","byteLength","end","requestErrorHandler"],"mappings":";;;;;;;AAIA;;AAHA;;AACA;AAUA,MAAMA,aAAa,GAAIC,GAAD,IAA8C;AAClE,MAAI,OAAOA,GAAG,CAACC,UAAX,KAA0B,QAA9B,EAAwC;AACtC,WAAOD,GAAG,CAACC,UAAX;AACD,GAFD,MAEO,IAAI,OAAOD,GAAG,CAACE,MAAX,KAAsB,QAA1B,EAAoC;AACzC,WAAOF,GAAG,CAACE,MAAX;AACD;;AACD,SAAO,GAAP;AACD,CAPD;;AASO,MAAMC,yBAAyB,GAAIC,OAAD,IAA6B,CACpEJ,GADoE,EAEpEK,GAFoE,EAGpEC,GAHoE,KAIjE;AACH,QAAMJ,MAAc,GAAGH,aAAa,CAACC,GAAD,CAApC;AAEA,MAAIO,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,MAAI,CAAC,gCAAL,EAAqB;AACnBD,IAAAA,OAAO,GAAI,OAAMP,GAAG,CAACO,OAAQ,OAA7B;AACAC,IAAAA,KAAK,GAAI,YAAWR,GAAG,CAACQ,KAAM,UAA9B;AACD;;AAED,MAAIF,GAAG,CAACG,WAAJ,IAAmBH,GAAG,CAACI,QAA3B,EAAqC;AACnCN,IAAAA,OAAO,CAACO,KAAR,CAAc,iDAAd;AACAP,IAAAA,OAAO,CAACO,KAAR,CAAc,8CAAd;AACAP,IAAAA,OAAO,CAACO,KAAR,CAAcX,GAAd;AACA;AACD;;AAED,QAAMY,IAAI,GAAI;;;;eAIDV,MAAO;;;;;;YAMVA,MAAO;EACjBK,OAAQ,GAAEC,KAAM;;QAXhB;AAeAF,EAAAA,GAAG,CAACL,UAAJ,GAAiBC,MAAjB;AACAI,EAAAA,GAAG,CAACO,SAAJ,CAAc,YAAd,EAA4B,OAA5B;AACAP,EAAAA,GAAG,CAACO,SAAJ,CAAc,gBAAd,EAAiC,GAAEC,MAAM,CAACC,UAAP,CAAkBH,IAAlB,EAAwB,MAAxB,CAAgC,EAAnE;AACAN,EAAAA,GAAG,CAACO,SAAJ,CAAc,cAAd,EAA8B,0BAA9B;AACAP,EAAAA,GAAG,CAACU,GAAJ,CAAQJ,IAAR;AACD,CA1CM;;;AA4CP,MAAMK,mBAAmB,GAAGd,yBAAyB,CAACC,OAAD,CAArD;eAEea,mB","sourcesContent":["// @flow\n/* eslint-disable no-console */\n/* global console process */\n\nimport {isProduction} from '../environment';\nimport type {IncomingMessage, ServerResponse} from 'http';\n\ndeclare class ErrorWithStatusCode extends Error {\n  status?: number;\n  statusCode?: number;\n}\n\nconst getStatusCode = (err: ErrorWithStatusCode | Error): number => {\n  if (typeof err.statusCode === 'number') {\n    return err.statusCode;\n  } else if (typeof err.status === 'number') {\n    return err.status;\n  }\n  return 500;\n};\n\nexport const createRequestErrorHandler = (console: typeof console) => (\n  err: Error,\n  req: IncomingMessage,\n  res: ServerResponse,\n) => {\n  const status: number = getStatusCode(err);\n\n  let message = '';\n  let stack = '';\n\n  if (!isProduction()) {\n    message = `<h2>${err.message}</h2>`;\n    stack = `\\n<pre>\\n${err.stack}\\n</pre>`;\n  }\n\n  if (res.headersSent || res.finished) {\n    console.error('Error occured after response already delivered.');\n    console.error('This probably indicates a problem elsewhere.');\n    console.error(err);\n    return;\n  }\n\n  const body = `\n<!DOCTYPE html>\n<html>\n<head>\n<title>Error ${status}</title>\n<style>\nbody{font-family: sans-serif; color: #333}\n</style>\n</head>\n<body>\n<h1>Error ${status}</h1>\n${message}${stack}\n</body>\n</html>`;\n\n  res.statusCode = status;\n  res.setHeader('Connection', 'close');\n  res.setHeader('Content-Length', `${Buffer.byteLength(body, 'utf8')}`);\n  res.setHeader('Content-Type', 'text/html; charset=utf-8');\n  res.end(body);\n};\n\nconst requestErrorHandler = createRequestErrorHandler(console);\n\nexport default requestErrorHandler;\n"],"file":"requestErrorHandler.js"}