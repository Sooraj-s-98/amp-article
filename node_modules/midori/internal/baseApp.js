"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _requestErrorHandler = _interopRequireDefault(require("./error/requestErrorHandler"));

var _upgradeErrorHandler = _interopRequireDefault(require("./error/upgradeErrorHandler"));

var _genericErrorHandler = _interopRequireDefault(require("./error/genericErrorHandler"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const baseApp = {
  request(req, res) {
    if (!res.finished) {
      if (!res.headersSent) {
        res.statusCode = 404;
      }

      res.end();
    }
  },

  upgrade(req, socket, _head) {
    // There isn't really a "catch-all" like `res.finished` for the `upgrade`
    // event. So if we're the only listener then we know we can close the
    // connection. Otherwise we just pray whomever else has attached to the
    // event knows what they're doing.
    if (typeof this.listenerCount !== 'function' || this.listenerCount('upgrade') === 1) {
      socket.end('HTTP/1.1 404 Not Found\r\n' + 'Connection: Close\r\n' + '\r\n');
    }
  },

  listening() {},

  close() {},

  error: _genericErrorHandler.default,
  upgradeError: _upgradeErrorHandler.default,
  requestError: _requestErrorHandler.default
};
var _default = baseApp;
exports.default = _default;
//# sourceMappingURL=baseApp.js.map