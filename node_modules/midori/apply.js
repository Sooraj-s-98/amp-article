"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pure = _interopRequireDefault(require("./pure"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const cache = new WeakMap();

const mapToCache = item => {
  if (cache.has(item)) {
    // TODO: https://github.com/facebook/flow/issues/2751
    // flowlint-next-line unclear-type: off
    return cache.get(item);
  }

  const result = new WeakMap();
  cache.set(item, result);
  return result;
};

const baseApp = {
  request:
  /* istanbul ignore next */
  () => {
    throw new Error();
  },
  upgrade:
  /* istanbul ignore next */
  () => {
    throw new Error();
  },
  listening:
  /* istanbul ignore next */
  () => {
    throw new Error();
  },
  close:
  /* istanbul ignore next */
  () => {
    throw new Error();
  },
  error:
  /* istanbul ignore next */
  err => {
    throw err;
  },
  upgradeError: err => {
    throw err;
  },
  requestError: err => {
    throw err;
  }
};

const createHandler = (app, cont, appItems) => async (cache, handleApp) => {
  const results = [];

  for (const app of appItems) {
    if (cache.has(app)) {
      results.push(cache.get(app));
    } else {
      const result = handleApp(app);
      cache.set(app, result);
      results.push(result);
    }
  }

  const result = await Promise.all(results).then(x => {
    return cont(...x);
  });
  return await handleApp(result(app));
};

const _apply = (cont, rest) => {
  const appItems = rest.map(item => {
    if (cache.has(item)) {
      // FIXME
      // $ExpectError
      return cache.get(item);
    }

    const app = item(_pure.default)(baseApp); // FIXME
    // $ExpectError

    cache.set(item, app);
    return app;
  });
  return app => {
    const handler = createHandler(app, cont, appItems);
    return _objectSpread({}, app, {
      request: async (req, res) => {
        try {
          const cache = mapToCache(req);
          return await handler(cache, async app => {
            return await app.request(req, res);
          });
        } catch (err) {
          return app.requestError(err, req, res);
        }
      },
      upgrade: async (req, socket, head) => {
        try {
          const cache = mapToCache(socket);
          return await handler(cache, async app => {
            return app.upgrade(req, socket, head);
          });
        } catch (err) {
          return app.upgradeError(err, req, socket, head);
        }
      }
    });
  };
};

/**
 * @desc
 * @tag core
 * @returns {App} New app.
 */
const apply = (...args) => {
  // TODO: Any way to make this better?
  const rest = args.slice(0, args.length - 1);
  const cont = args[args.length - 1];

  const out = _apply(cont, rest);

  return out;
};

var _default = apply;
exports.default = _default;
//# sourceMappingURL=apply.js.map